package cn.edu.hytc.schoolhelper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.hytc.schoolhelper.entity.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Course_id = new Property(0, Long.class, "course_id", true, "_id");
        public final static Property Course_week = new Property(1, int.class, "course_week", false, "COURSE_WEEK");
        public final static Property Course_name = new Property(2, String.class, "course_name", false, "COURSE_NAME");
        public final static Property Course_seq = new Property(3, int.class, "course_seq", false, "COURSE_SEQ");
        public final static Property Course_room = new Property(4, String.class, "course_room", false, "COURSE_ROOM");
        public final static Property Course_teacher = new Property(5, String.class, "course_teacher", false, "COURSE_TEACHER");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: course_id
                "\"COURSE_WEEK\" INTEGER NOT NULL ," + // 1: course_week
                "\"COURSE_NAME\" TEXT," + // 2: course_name
                "\"COURSE_SEQ\" INTEGER NOT NULL ," + // 3: course_seq
                "\"COURSE_ROOM\" TEXT," + // 4: course_room
                "\"COURSE_TEACHER\" TEXT);"); // 5: course_teacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long course_id = entity.getCourse_id();
        if (course_id != null) {
            stmt.bindLong(1, course_id);
        }
        stmt.bindLong(2, entity.getCourse_week());
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(3, course_name);
        }
        stmt.bindLong(4, entity.getCourse_seq());
 
        String course_room = entity.getCourse_room();
        if (course_room != null) {
            stmt.bindString(5, course_room);
        }
 
        String course_teacher = entity.getCourse_teacher();
        if (course_teacher != null) {
            stmt.bindString(6, course_teacher);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long course_id = entity.getCourse_id();
        if (course_id != null) {
            stmt.bindLong(1, course_id);
        }
        stmt.bindLong(2, entity.getCourse_week());
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(3, course_name);
        }
        stmt.bindLong(4, entity.getCourse_seq());
 
        String course_room = entity.getCourse_room();
        if (course_room != null) {
            stmt.bindString(5, course_room);
        }
 
        String course_teacher = entity.getCourse_teacher();
        if (course_teacher != null) {
            stmt.bindString(6, course_teacher);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // course_id
            cursor.getInt(offset + 1), // course_week
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // course_name
            cursor.getInt(offset + 3), // course_seq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // course_room
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // course_teacher
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setCourse_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourse_week(cursor.getInt(offset + 1));
        entity.setCourse_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCourse_seq(cursor.getInt(offset + 3));
        entity.setCourse_room(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCourse_teacher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setCourse_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getCourse_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getCourse_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
